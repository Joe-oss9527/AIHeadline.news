# 专门用于数据同步的独立工作流
name: Sync News Data from Archive

on:
  # 1. 定时触发 - 每2小时检查一次
  schedule:
    - cron: '0 */2 * * *'  # 每2小时执行一次

  # 2. 手动触发
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync even if no changes detected'
        required: false
        default: 'false'
        type: boolean

  # 3. Repository dispatch - 可由外部 webhook 触发
  repository_dispatch:
    types: [sync-news-data]

permissions:
  contents: write
  actions: read

concurrency:
  group: "sync-news-data"
  cancel-in-progress: true

jobs:
  sync-data:
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    outputs:
      has_updates: ${{ steps.check_updates.outputs.has_updates }}
      latest_commit: ${{ steps.check_updates.outputs.latest_commit }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action Bot"

      - name: Check for archive updates
        id: check_updates
        run: |
          set -euo pipefail

          echo "::group::Fetching archive repository"

          # 获取当前子模块提交
          CURRENT_COMMIT=""
          if [[ -f ".gitmodules" ]] && [[ -d "source-news" ]]; then
            CURRENT_COMMIT=$(git ls-tree HEAD source-news | awk '{print $3}' || echo "")
          fi
          echo "Current submodule commit: ${CURRENT_COMMIT:-<none>}"

          # 获取 archive 仓库最新提交
          LATEST_COMMIT=$(git ls-remote https://github.com/Joe-oss9527/ai-briefing-archive.git HEAD | cut -f1)
          echo "Latest archive commit: $LATEST_COMMIT"

          # 检查是否有更新
          HAS_UPDATES="false"
          if [[ "$CURRENT_COMMIT" != "$LATEST_COMMIT" ]] || [[ "${{ inputs.force_sync }}" == "true" ]]; then
            HAS_UPDATES="true"
            echo "::notice::Updates detected or force sync requested"
          else
            echo "::notice::No updates found"
          fi

          echo "has_updates=$HAS_UPDATES" >> $GITHUB_OUTPUT
          echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          echo "current_commit=$CURRENT_COMMIT" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Force update submodule
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          set -euo pipefail

          echo "::group::Updating submodule to latest"

          # 删除现有子模块目录（如果存在）
          if [[ -d "source-news" ]]; then
            echo "Removing existing submodule directory"
            rm -rf source-news
          fi

          # 重新初始化子模块
          echo "Initializing submodule"
          git submodule deinit -f source-news || true
          git rm -f source-news || true
          rm -rf .git/modules/source-news || true

          # 重新添加子模块并指向最新提交
          git submodule add -f https://github.com/Joe-oss9527/ai-briefing-archive.git source-news
          cd source-news

          # 确保在 main 分支上并拉取最新内容
          git checkout main
          git pull origin main

          cd ..

          echo "::notice::Submodule updated successfully"
          echo "::endgroup::"

      - name: Verify submodule content
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          echo "::group::Verifying submodule content"

          cd source-news
          echo "Current branch: $(git branch --show-current)"
          echo "Latest commit: $(git rev-parse HEAD)"
          echo "Latest 3 commits:"
          git log --oneline -3

          # 检查是否有最新的摘要文件
          echo "Recent briefing files:"
          find . -name "briefing_*.md" -type f | sort -r | head -5

          cd ..
          echo "::endgroup::"

      - name: Commit submodule update
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          set -euo pipefail

          echo "::group::Committing submodule update"

          # 检查是否有变更需要提交
          if git diff --cached --quiet && git diff --quiet; then
            echo "::notice::No changes to commit"
            exit 0
          fi

          git add source-news

          # 生成详细的提交信息
          NEW_COMMIT="${{ steps.check_updates.outputs.latest_commit }}"
          OLD_COMMIT="${{ steps.check_updates.outputs.current_commit }}"

          COMMIT_MSG="chore(submodule): sync news data to ${NEW_COMMIT:0:7}

          - Updated source-news submodule from ${OLD_COMMIT:0:7} to ${NEW_COMMIT:0:7}
          - Triggered by: ${{ github.event_name }}
          - Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

          git commit -m "$COMMIT_MSG"

          echo "::notice::Changes committed successfully"
          echo "::endgroup::"

      - name: Push changes
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          set -euo pipefail

          echo "::group::Pushing changes"

          # 推送变更，带重试机制
          for i in {1..3}; do
            echo "Push attempt $i of 3"

            if git push origin main; then
              echo "::notice::Changes pushed successfully"
              break
            else
              if [[ $i -eq 3 ]]; then
                echo "::error::Failed to push after 3 attempts"
                exit 1
              fi

              echo "::warning::Push failed, attempting to sync with remote"
              git fetch origin main
              git rebase origin/main || {
                git rebase --abort
                echo "::error::Rebase failed, manual intervention required"
                exit 1
              }

              sleep 5
            fi
          done

          echo "::endgroup::"

      - name: Trigger content update workflow
        if: steps.check_updates.outputs.has_updates == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: 'main',
              inputs: {
                reason: 'news-data-updated'
              }
            });

            console.log('Content update workflow triggered');

      - name: Summary
        run: |
          if [[ "${{ steps.check_updates.outputs.has_updates }}" == "true" ]]; then
            echo "## ✅ 数据同步成功" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **更新来源**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **旧提交**: ${{ steps.check_updates.outputs.current_commit }}" >> $GITHUB_STEP_SUMMARY
            echo "- **新提交**: ${{ steps.check_updates.outputs.latest_commit }}" >> $GITHUB_STEP_SUMMARY
            echo "- **时间**: $(date -u)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "内容更新工作流已自动触发。" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ℹ️ 无需更新" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "数据源无新内容，跳过同步。" >> $GITHUB_STEP_SUMMARY
          fi