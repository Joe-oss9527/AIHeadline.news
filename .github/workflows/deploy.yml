# .github/workflows/deploy.yml
name: Deploy AI News to Cloudflare & GitHub Pages

on:
  schedule:
    - cron: '0 0 * * *' # 每天UTC 0点 (北京时间8点)
  workflow_dispatch:
  push:
    branches:
      - main

# 设置GITHUB_TOKEN的权限
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过正在运行和最新队列之间的运行队列
concurrency:
  group: "pages"
  cancel-in-progress: false

# 默认设置
defaults:
  run:
    shell: bash

jobs:
  # 构建任务
  build:
    runs-on: ubuntu-24.04
    env:
      HUGO_VERSION: 0.148.1
    steps:
      # 步骤1: 安装Hugo CLI
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      
      # 步骤2: 检出网站代码仓库
      - name: Checkout website repo
        uses: actions/checkout@v4  # 使用 v4 标签
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Update submodules
        run: |
          git submodule update --init --depth 1 source-news

      - name: Restore sync cache
        uses: actions/cache@v4
        with:
          path: ./.cache
          key: sync-state-${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            sync-state-${{ github.ref_name }}-
            sync-state-

      - name: Compute changed dates
        id: changed
        run: |
          set -euo pipefail
          mkdir -p .cache
          STATE_FILE=.cache/source_news_sha
          OLD_SUB=""
          if [[ -f "$STATE_FILE" ]]; then
            OLD_SUB="$(cat "$STATE_FILE" || true)"
          fi
          # 读取当前超级项目中的 submodule 提交指针
          NEW_SUB="$(git ls-tree HEAD source-news | awk '{print $3}')"
          echo "Old submodule SHA: ${OLD_SUB:-<none>}"
          echo "New submodule SHA: ${NEW_SUB:-<none>}"
          CHANGED_DATES=""
          if [[ -n "${OLD_SUB}" && -n "${NEW_SUB}" && "${OLD_SUB}" != "${NEW_SUB}" ]]; then
            # 确保 submodule 仓库包含所需对象
            git -C source-news fetch --depth=500 origin || true
            # 列出变更的 briefing markdown 文件，提取日期
            CHANGED_FILES="$(git -C source-news diff --name-only "${OLD_SUB}" "${NEW_SUB}" -- '*/briefing_*.md' || true)"
            if [[ -n "${CHANGED_FILES}" ]]; then
              CHANGED_DATES=$(printf '%s\n' "${CHANGED_FILES}" | sed -n 's#.*briefing_\([0-9]\{8\}\)T[0-9]\{6\}Z\.md#\1#p' | sort -u | paste -sd, -)
            fi
          fi
          echo "CHANGED_DATES=${CHANGED_DATES}" | tee -a "$GITHUB_ENV"
          # 检测站点代码/模板是否变更（需要立即生效）
          CODE_CHANGED_FILES="$(git diff --name-only "${{ github.event.before }}" "${{ github.sha }}" -- .github/scripts .github/templates layouts hugo.toml assets static archetypes || true)"
          if [[ -n "$CODE_CHANGED_FILES" ]]; then
            echo "CODE_CHANGED=true" | tee -a "$GITHUB_ENV"
          else
            echo "CODE_CHANGED=false" | tee -a "$GITHUB_ENV"
          fi
          # 决定同步模式：首次运行或每周日（UTC）全量，否则增量
          DOW=$(date -u +%u)
          if [[ ! -f "$STATE_FILE" || -z "${OLD_SUB}" ]]; then
            echo "SYNC_MODE=full" | tee -a "$GITHUB_ENV"
            echo "First run detected -> full rebuild"
          elif [[ "$DOW" == "7" ]]; then
            echo "SYNC_MODE=full" | tee -a "$GITHUB_ENV"
          elif [[ "$CODE_CHANGED" == "true" ]]; then
            echo "SYNC_MODE=full" | tee -a "$GITHUB_ENV"
            echo "Site code/templates changed -> full rebuild"
          elif [[ "${GITHUB_EVENT_NAME}" == "push" && -z "${CHANGED_DATES}" ]]; then
            echo "SYNC_MODE=full" | tee -a "$GITHUB_ENV"
            echo "Push with no content changes -> full rebuild"
          else
            echo "SYNC_MODE=incremental" | tee -a "$GITHUB_ENV"
          fi
          # 保存本次 submodule 指针
          printf '%s' "${NEW_SUB}" > "$STATE_FILE"

      # 步骤4: 同步新闻文件（增量/全量按 SYNC_MODE）
      - name: Sync markdown files
        run: |
          chmod +x ./.github/scripts/sync-news.sh
          ./.github/scripts/sync-news.sh --mode="${SYNC_MODE}" --dates="${CHANGED_DATES}"

      # 步骤5: 设置Pages
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5  # 使用最新版本

      # 步骤6: 构建网站
      - name: Restore Hugo cache
        uses: actions/cache@v4
        with:
          path: ./.cache/hugo_cache
          key: hugo-cache-${{ runner.os }}-${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            hugo-cache-${{ runner.os }}-${{ github.ref_name }}-
            hugo-cache-${{ runner.os }}-

      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ github.workspace }}/.cache/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"

      # 步骤7: 上传 GitHub Pages 构建产物
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3  # Pages 专用 action 保持 v3
        with:
          path: ./public

  # 部署到GitHub Pages
  deploy-gh-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4  # 使用最新版本

  # 部署到Cloudflare Worker
  deploy-cf-worker:
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main'
    env:
      HUGO_VERSION: 0.148.1
    steps:
      # 步骤1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Update submodules
        run: |
          git submodule update --init --depth 1 source-news

      - name: Restore sync cache
        uses: actions/cache@v4
        with:
          path: ./.cache
          key: sync-state-${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            sync-state-${{ github.ref_name }}-
            sync-state-

      - name: Compute changed dates
        id: changed
        run: |
          set -euo pipefail
          mkdir -p .cache
          STATE_FILE=.cache/source_news_sha
          OLD_SUB=""
          if [[ -f "$STATE_FILE" ]]; then
            OLD_SUB="$(cat "$STATE_FILE" || true)"
          fi
          NEW_SUB="$(git ls-tree HEAD source-news | awk '{print $3}')"
          echo "Old submodule SHA: ${OLD_SUB:-<none>}"
          echo "New submodule SHA: ${NEW_SUB:-<none>}"
          CHANGED_DATES=""
          if [[ -n "${OLD_SUB}" && -n "${NEW_SUB}" && "${OLD_SUB}" != "${NEW_SUB}" ]]; then
            git -C source-news fetch --depth=500 origin || true
            CHANGED_FILES="$(git -C source-news diff --name-only "${OLD_SUB}" "${NEW_SUB}" -- '*/briefing_*.md' || true)"
            if [[ -n "${CHANGED_FILES}" ]]; then
              CHANGED_DATES=$(printf '%s\n' "${CHANGED_FILES}" | sed -n 's#.*briefing_\([0-9]\{8\}\)T[0-9]\{6\}Z\.md#\1#p' | sort -u | paste -sd, -)
            fi
          fi
          echo "CHANGED_DATES=${CHANGED_DATES}" | tee -a "$GITHUB_ENV"
          CODE_CHANGED_FILES="$(git diff --name-only "${{ github.event.before }}" "${{ github.sha }}" -- .github/scripts .github/templates layouts hugo.toml assets static archetypes || true)"
          if [[ -n "$CODE_CHANGED_FILES" ]]; then
            echo "CODE_CHANGED=true" | tee -a "$GITHUB_ENV"
          else
            echo "CODE_CHANGED=false" | tee -a "$GITHUB_ENV"
          fi
          DOW=$(date -u +%u)
          if [[ ! -f "$STATE_FILE" || -z "${OLD_SUB}" ]]; then
            echo "SYNC_MODE=full" | tee -a "$GITHUB_ENV"
            echo "First run detected -> full rebuild"
          elif [[ "$DOW" == "7" ]]; then
            echo "SYNC_MODE=full" | tee -a "$GITHUB_ENV"
          elif [[ "$CODE_CHANGED" == "true" ]]; then
            echo "SYNC_MODE=full" | tee -a "$GITHUB_ENV"
            echo "Site code/templates changed -> full rebuild"
          elif [[ "${GITHUB_EVENT_NAME}" == "push" && -z "${CHANGED_DATES}" ]]; then
            echo "SYNC_MODE=full" | tee -a "$GITHUB_ENV"
            echo "Push with no content changes -> full rebuild"
          else
            echo "SYNC_MODE=incremental" | tee -a "$GITHUB_ENV"
          fi
          printf '%s' "${NEW_SUB}" > "$STATE_FILE"

      # 步骤2: 安装 Hugo
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      # 步骤4: 同步新闻文件（增量/全量按 SYNC_MODE）
      - name: Sync markdown files
        run: |
          chmod +x ./.github/scripts/sync-news.sh
          ./.github/scripts/sync-news.sh --mode="${SYNC_MODE}" --dates="${CHANGED_DATES}"

      # 步骤5: 构建网站
      - name: Restore Hugo cache
        uses: actions/cache@v4
        with:
          path: ./.cache/hugo_cache
          key: hugo-cache-${{ runner.os }}-${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            hugo-cache-${{ runner.os }}-${{ github.ref_name }}-
            hugo-cache-${{ runner.os }}-

      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ github.workspace }}/.cache/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo \
            --gc \
            --minify
          echo "=== Contents of public directory ==="
          ls -la public/

      # 步骤6: 设置 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 步骤7: 安装依赖
      - name: Install dependencies
        run: npm ci

      # 步骤8: 部署到 Cloudflare Worker
      - name: Deploy to Cloudflare Worker
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
