name: 'Setup Hugo and Sync Content'
description: 'Composite action to setup Hugo, update submodules, and sync content'
inputs:
  hugo-version:
    description: 'Hugo version to install'
    required: false
    default: '0.150.0'
  sync-mode:
    description: 'Sync mode: auto, full, or incremental'
    required: false
    default: 'auto'
  changed-dates:
    description: 'Comma-separated list of changed dates (YYYYMMDD)'
    required: false
    default: ''
  install-hugo:
    description: 'Whether to install Hugo'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        # 验证 Hugo 版本格式
        if [[ ! "${{ inputs.hugo-version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid Hugo version format: ${{ inputs.hugo-version }}"
          exit 1
        fi
        # 验证同步模式
        if [[ ! "${{ inputs.sync-mode }}" =~ ^(auto|full|incremental)$ ]]; then
          echo "::error::Invalid sync mode: ${{ inputs.sync-mode }}"
          exit 1
        fi
        echo "::notice::Input validation passed"

    - name: Install Hugo CLI
      if: inputs.install-hugo == 'true'
      shell: bash
      run: |
        set -euo pipefail
        trap 'echo "::error::Hugo installation failed"' ERR
        echo "::group::Installing Hugo ${{ inputs.hugo-version }}"
        wget -O "${{ runner.temp }}/hugo.deb" "https://github.com/gohugoio/hugo/releases/download/v${{ inputs.hugo-version }}/hugo_extended_${{ inputs.hugo-version }}_linux-amd64.deb" \
          && sudo dpkg -i "${{ runner.temp }}/hugo.deb"
        echo "::endgroup::"
        hugo version

    - name: Check and update submodule
      shell: bash
      run: |
        set -euo pipefail
        trap 'echo "::error::Submodule update failed at line $LINENO"' ERR

        echo "::group::Updating submodule"
        # Initialize and update to latest remote commit with retry
        for i in {1..3}; do
          if git submodule update --init --remote source-news; then
            echo "::notice::Submodule updated successfully"
            break
          elif [[ $i -eq 3 ]]; then
            echo "::error::Failed to update submodule after 3 attempts"
            exit 1
          else
            echo "::warning::Submodule update attempt $i failed, retrying..."
            sleep 5
          fi
        done
        echo "::endgroup::"

        # Check if submodule was updated and commit if necessary
        if ! git diff --quiet source-news; then
          echo "::group::Committing submodule update"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add source-news
          git commit -m "chore(submodule): auto-update source-news to latest"

          # Push with retry
          for i in {1..3}; do
            if git push; then
              echo "::notice::Submodule update committed and pushed"
              break
            elif [[ $i -eq 3 ]]; then
              echo "::error::Failed to push submodule update after 3 attempts"
              exit 1
            else
              echo "::warning::Push attempt $i failed, retrying..."
              sleep 5
            fi
          done
          echo "::endgroup::"
        else
          echo "::notice::No submodule changes detected"
        fi

    - name: Restore sync cache
      uses: actions/cache@v4
      with:
        path: ./.cache
        key: sync-state-${{ github.ref_name }}-${{ github.sha }}
        restore-keys: |
          sync-state-${{ github.ref_name }}-
          sync-state-

    - name: Compute changed dates
      shell: bash
      env:
        GITHUB_EVENT_BEFORE: ${{ github.event.before }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        set -euo pipefail
        mkdir -p .cache
        STATE_FILE=.cache/source_news_sha
        OLD_SUB=""
        if [[ -f "$STATE_FILE" ]]; then
          OLD_SUB="$(cat "$STATE_FILE" || true)"
        fi
        NEW_SUB="$(git ls-tree HEAD source-news | awk '{print $3}')"
        echo "Old submodule SHA: ${OLD_SUB:-<none>}"
        echo "New submodule SHA: ${NEW_SUB:-<none>}"

        CHANGED_DATES=""
        if [[ -n "${OLD_SUB}" && -n "${NEW_SUB}" && "${OLD_SUB}" != "${NEW_SUB}" ]]; then
          git -C source-news fetch --depth=500 origin || true
          CHANGED_FILES="$(git -C source-news diff --name-only "${OLD_SUB}" "${NEW_SUB}" -- '*/briefing_*.md' || true)"
          if [[ -n "${CHANGED_FILES}" ]]; then
            CHANGED_DATES=$(printf '%s\n' "${CHANGED_FILES}" | sed -n 's#.*briefing_\([0-9]\{8\}\)T[0-9]\{6\}Z\.md#\1#p' | sort -u | paste -sd, -)
          fi
        fi
        echo "CHANGED_DATES=${CHANGED_DATES}" | tee -a "$GITHUB_ENV"

        # 检测站点代码/模板是否变更（需要立即生效）
        CODE_CHANGED_FILES=""
        if [[ -n "${GITHUB_EVENT_BEFORE:-}" ]]; then
          CODE_CHANGED_FILES="$(git diff --name-only "${GITHUB_EVENT_BEFORE}" "${GITHUB_SHA}" -- .github/scripts layouts hugo.toml assets static archetypes || true)"
        fi
        if [[ -n "$CODE_CHANGED_FILES" ]]; then
          CODE_CHANGED="true"
          echo "CODE_CHANGED=true" | tee -a "$GITHUB_ENV"
        else
          CODE_CHANGED="false"
          echo "CODE_CHANGED=false" | tee -a "$GITHUB_ENV"
        fi

        # 决定同步模式：首次运行或每周日（UTC）全量，否则增量
        DOW=$(date -u +%u)
        SYNC_MODE="${{ inputs.sync-mode }}"
        if [[ "$SYNC_MODE" == "auto" ]]; then
          # 如果缓存文件不存在或OLD_SUB为空，则使用最近7天的回溯逻辑
          if [[ ! -f "$STATE_FILE" || -z "${OLD_SUB}" ]]; then
            SYNC_MODE="full"
            echo "First run or cache miss detected -> full rebuild"
          elif [[ "$DOW" == "7" ]]; then
            SYNC_MODE="full"
            echo "Weekly full rebuild (Sunday)"
          elif [[ "$CODE_CHANGED" == "true" ]]; then
            SYNC_MODE="full"
            echo "Site code/templates changed -> full rebuild"
          elif [[ "${GITHUB_EVENT_NAME}" == "schedule" ]]; then
            # 定时任务使用增量模式，但如果没有变更则使用最近7天的数据
            if [[ -n "${CHANGED_DATES}" ]]; then
              SYNC_MODE="incremental"
              echo "Scheduled run with detected changes -> incremental"
            else
              SYNC_MODE="full"
              echo "Scheduled run with no changes detected -> full rebuild"
            fi
          elif [[ "${GITHUB_EVENT_NAME}" == "push" && -z "${CHANGED_DATES}" ]]; then
            SYNC_MODE="full"
            echo "Push with no content changes -> full rebuild"
          else
            SYNC_MODE="incremental"
          fi
        fi
        echo "SYNC_MODE=${SYNC_MODE}" | tee -a "$GITHUB_ENV"

        # 保存本次 submodule 指针
        printf '%s' "${NEW_SUB}" > "$STATE_FILE"

    - name: Sync markdown files
      shell: bash
      run: |
        chmod +x ./.github/scripts/sync-news.sh
        DATES_TO_USE="${{ inputs.changed-dates }}"
        if [[ -z "$DATES_TO_USE" ]]; then
          DATES_TO_USE="${CHANGED_DATES:-}"
        fi
        ./.github/scripts/sync-news.sh --mode="${SYNC_MODE}" --dates="${DATES_TO_USE}"